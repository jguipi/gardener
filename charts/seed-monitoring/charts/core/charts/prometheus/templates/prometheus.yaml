apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    app: prometheus
    role: monitoring
automountServiceAccountToken: false
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-web
  namespace: {{ .Release.Namespace }}
  labels:
    app: prometheus
    role: monitoring
spec:
  ports:
  - name: metrics
    port: 80
    protocol: TCP
    targetPort: {{ .Values.port }}
  selector:
    app: prometheus
    role: monitoring
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: {{include "statefulsetversion" .}}
kind: StatefulSet
metadata:
  name: prometheus
  namespace: {{ .Release.Namespace }}
  labels:
    gardener.cloud/role: monitoring
    app: prometheus
    role: monitoring
spec:
  updateStrategy:
    type: RollingUpdate
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: prometheus
      role: monitoring
  serviceName: prometheus
  template:
    metadata:
      annotations:
        checksum/configmap-blackbox-exporter: {{ include (print $.Template.BasePath "/blackbox-exporter-config.yaml") . | sha256sum }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        gardener.cloud/role: monitoring
        app: prometheus
        role: monitoring
        networking.gardener.cloud/to-dns: allowed
        networking.gardener.cloud/to-runtime-apiserver: allowed
        networking.resources.gardener.cloud/to-all-scrape-targets: allowed
        # needed for blackbox-exporter sidecar container to talk to shoot API server via istio-ingressgateway
        networking.gardener.cloud/to-public-networks: allowed
        networking.resources.gardener.cloud/to-all-istio-ingresses-istio-ingressgateway-tcp-9443: allowed
    spec:
      # used to talk to Seed's API server.
      serviceAccountName: prometheus
      priorityClassName: gardener-system-100
      containers:
      - name: prometheus
        image: {{ index .Values.images "prometheus" }}
        imagePullPolicy: IfNotPresent
        args:
        - --config.file=/etc/prometheus/config/prometheus.yaml
        - --storage.tsdb.path=/var/prometheus/data
        - --storage.tsdb.no-lockfile
        - --storage.tsdb.retention.time=30d
        - --storage.tsdb.retention.size=15GB
        - --web.route-prefix=/
        - --web.enable-lifecycle
        - --web.listen-address=0.0.0.0:{{ .Values.port }}
        - --web.external-url=https://{{ .Values.ingress.host }}
        # Since v2.0.0-beta.3 prometheus runs as nobody user (fsGroup 65534/runAsUser 0)
        # data volume needs to be mounted with the same permissions,
        # otherwise we will have Permission denied problems
        securityContext:
          runAsUser: 0
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: {{ .Values.port }}
            scheme: HTTP
          failureThreshold: 60
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: {{ .Values.port }}
            scheme: HTTP
          failureThreshold: 120
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        ports:
        - name: web
          containerPort: 9090
          protocol: TCP
        resources:
          requests:
            cpu: 50m
            memory: 350Mi
        volumeMounts:
        - mountPath: /etc/prometheus/seed
          name: shoot-ca
        - mountPath: /srv/kubernetes/etcd/ca
          name: ca-etcd
        - mountPath: /srv/kubernetes/etcd/client
          name: etcd-client-tls
        - mountPath: /etc/prometheus/config
          name: config
          readOnly: true
        - mountPath: /etc/prometheus/rules
          name: rules
          readOnly: true
        - mountPath: /var/prometheus/data
          name: prometheus-db
          subPath: prometheus-
        - name: shoot-access
          mountPath: /var/run/secrets/gardener.cloud/shoot/token
          readOnly: true
        {{- if hasKey .Values.alerting.auth_type "certificate" }}
        - mountPath: /etc/prometheus/operator
          name: prometheus-remote-am-tls
        {{- end }}
      - name: blackbox-exporter
        image: {{ index .Values.images "blackbox-exporter" }}
        args:
        - --config.file=/vpn/blackbox.yaml
        - --web.listen-address=127.0.0.1:9115
        ports:
        # port name must be max 15 characters long
        - name: blackbox-export
          containerPort: 9115
          protocol: TCP
        resources:
          requests:
            cpu: 10m
            memory: 25Mi
          limits:
            memory: 128Mi
        volumeMounts:
        - name: blackbox-exporter-config-prometheus
          mountPath: /vpn
        - mountPath: /var/run/secrets/shoot-ca
          name: shoot-ca
          readOnly: true
        - name: shoot-access
          mountPath: /var/run/secrets/gardener.cloud/shoot/token
          readOnly: true
      - name: prometheus-config-reloader
        image: {{ index .Values.images "configmap-reloader" }}
        imagePullPolicy: IfNotPresent
        args:
        - --reload-url=http://localhost:{{ .Values.port }}/-/reload
        - --watched-dir=/etc/prometheus/config
        - --watched-dir=/etc/prometheus/rules
        resources:
          requests:
            cpu: 5m
            memory: 25Mi
          limits:
            memory: 40Mi
        volumeMounts:
        - mountPath: /etc/prometheus/config
          name: config
          readOnly: true
        - mountPath: /etc/prometheus/rules
          name: rules
          readOnly: true
      terminationGracePeriodSeconds: 60
      volumes:
      - name: config
        configMap:
          defaultMode: 420
          name: prometheus-config
      - name: rules
        configMap:
          defaultMode: 420
          name: prometheus-rules
      - name: shoot-ca
        projected:
          defaultMode: 420
          sources:
          # For backwards-compatibility, we make the CA bundle available under both ca.crt and bundle.crt keys.
          - secret:
              name: {{ .Values.secretNameClusterCA }}
              items:
              - key: bundle.crt
                path: bundle.crt
              - key: bundle.crt
                path: ca.crt
              optional: false
      - name: ca-etcd
        secret:
          secretName: {{ .Values.secretNameEtcdCA }}
      - name: etcd-client-tls
        secret:
          secretName: {{ .Values.secretNameEtcdClientCert }}
      - name: shoot-access
        secret:
          secretName: shoot-access-prometheus
      - name: blackbox-exporter-config-prometheus
        configMap:
          name: blackbox-exporter-config-prometheus
{{- if hasKey .Values.alerting.auth_type "certificate" }}
      - name: prometheus-remote-am-tls
        secret:
          secretName: prometheus-remote-am-tls
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: prometheus-db
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.storage }}
